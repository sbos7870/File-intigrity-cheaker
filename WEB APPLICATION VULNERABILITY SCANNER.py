import requests
from bs4 import BeautifulSoup
import urllib.parse
import re

def scan_xss(url):
    """Scans for basic XSS vulnerabilities."""
    payloads = ["<script>alert('XSS')</script>",
                "<img src=x onerror=alert('XSS')>",
                "<svg/onload=alert('XSS')>",
                "\"'><script>alert('XSS')</script>",
                "\'><script>alert('XSS')</script>"]

    parsed_url = urllib.parse.urlparse(url)
    query_params = urllib.parse.parse_qs(parsed_url.query)

    for param in query_params:
        for payload in payloads:
            test_url = url.replace(query_params[param][0], payload)
            try:
                response = requests.get(test_url, timeout=5)
                if payload in response.text:
                    print(f"Potential XSS vulnerability found in parameter: {param} with payload: {payload}")
            except requests.exceptions.RequestException as e:
                print(f"Error scanning {test_url}: {e}")

def scan_sql_injection(url):
    """Scans for basic SQL injection vulnerabilities."""
    payloads = ["'", "\"", "or '1'='1'", "or \"1\"=\"1\"", ";--", "/*", "--", "') OR ('1'='1"]
    parsed_url = urllib.parse.urlparse(url)
    query_params = urllib.parse.parse_qs(parsed_url.query)

    for param in query_params:
        for payload in payloads:
            test_url = url.replace(query_params[param][0], payload)
            try:
                response = requests.get(test_url, timeout=5)
                if "error" in response.text.lower() or "syntax" in response.text.lower() or "mysql" in response.text.lower() or "sqlite" in response.text.lower() or "postgresql" in response.text.lower():
                    print(f"Potential SQL injection vulnerability found in parameter: {param} with payload: {payload}")
            except requests.exceptions.RequestException as e:
                print(f"Error scanning {test_url}: {e}")

def scan_directory_traversal(url):
    """Scans for directory traversal vulnerabilities."""
    payloads = ["../etc/passwd", "..\\etc\\passwd", "../../etc/passwd", "..\\..\\etc\\passwd"]
    parsed_url = urllib.parse.urlparse(url)
    query_params = urllib.parse.parse_qs(parsed_url.query)

    for param in query_params:
        for payload in payloads:
            test_url = url.replace(query_params[param][0], payload)
            try:
                response = requests.get(test_url, timeout=5)
                if "root:" in response.text.lower(): #very basic check.
                    print(f"Potential Directory Traversal vulnerability found in parameter: {param} with payload: {payload}")
            except requests.exceptions.RequestException as e:
                print(f"Error scanning {test_url}: {e}")

def scan_html_comments(url):
    """Scans for sensitive information in HTML comments."""
    try:
        response = requests.get(url, timeout=5)
        soup = BeautifulSoup(response.content, 'html.parser')
        comments = soup.find_all(string=lambda text: isinstance(text, BeautifulSoup.Comment))
        for comment in comments:
            if "password" in comment.lower() or "api_key" in comment.lower() or "secret" in comment.lower(): #basic sensitive data check.
                print(f"Potential sensitive data found in HTML comment: {comment}")
    except requests.exceptions.RequestException as e:
        print(f"Error scanning {url}: {e}")


def scan_for_vulnerabilities(target_url):
    """Orchestrates the vulnerability scans."""
    print(f"Scanning {target_url}...")
    scan_xss(target_url)
    scan_sql_injection(target_url)
    scan_directory_traversal(target_url)
    scan_html_comments(target_url)
    print("Scan complete.")

#Example usage.
target_url = "http://example.com/page.php?id=1&name=test" #replace with target.
scan_for_vulnerabilities(target_url)

target_url2 = "http://example.com/page2.html"
scan_for_vulnerabilities(target_url2)